{
  "notifications": [
    {
      "id": "1",
      "title": "Уведомление 1",
      "description": "Произошло какое-то событие",
      "userId": "1"
    },
    {
      "id": "2",
      "title": "Уведомление 2",
      "description": "Произошло какое-то событие",
      "userId": "1",
      "href": "http://localhost:3000/admin"
    },
    {
      "id": "3",
      "title": "Уведомление 3",
      "description": "Произошло какое-то событие",
      "userId": "1",
      "href": "http://localhost:3000/admin"
    },
    {
      "id": "4",
      "title": "Уведомление 4",
      "description": "Произошло какое-то событие",
      "userId": "1"
    },
    {
      "id": "5",
      "title": "Уведомление 1",
      "description": "Произошло какое-то событие",
      "userId": "2"
    }
  ],
  "posts": [
    {
      "id": "1",
      "title": "json-server",
      "userId": "1"
    },
    {
      "id": "2",
      "title": "json-server",
      "userId": 2
    }
  ],
  "comments": [
    {
      "id": "1",
      "text": "some comment",
      "articleId": "1",
      "userId": "1"
    },
    {
      "id": "2",
      "text": "some comment 2",
      "articleId": "1",
      "userId": "1"
    },
    {
      "text": "tEST",
      "articleId": "1",
      "userId": "1",
      "id": "Ifft-eL"
    }
  ],
  "users": [
    {
      "id": "1",
      "username": "admin",
      "password": "123",
      "roles": [
        "ADMIN"
      ],
      "features": {
        "isProfileRatingEnabled": true
      },
      "jsonSettings": {
        "theme": "app_gray_theme"
      },
      "avatar": "https://yastatic.net/s3/fiji-static/_/BhSOy0uVxgiuSYKBBKCi2JGQy6U.png"
    },
    {
      "id": "2",
      "username": "user",
      "password": "123",
      "roles": [
        "MANAGER"
      ],
      "features": {
        "isProfileRatingEnabled": false
      },
      "jsonSettings": {
        "theme": "app_light_theme"
      },
      "avatar": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTonMt3t0fOLVhvo_2RYRKsD9hgts80cJWSIQ&s"
    },
    {
      "id": "3",
      "username": "testuser",
      "password": "123",
      "roles": [
        "MANAGER"
      ],
      "features": {
        "isProfileRatingEnabled": true
      },
      "jsonSettings": {
        "theme": "app_light_theme"
      },
      "avatar": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTonMt3t0fOLVhvo_2RYRKsD9hgts80cJWSIQ&s"
    }
  ],
  "articles": [
    {
      "id": "1",
      "title": "Система маршрутизации в Vue.js для создания SPA",
      "subtitle": "Основы, возможности и реализация Vue Router",
      "img": "https://upload.wikimedia.org/wikipedia/commons/5/53/Vue.js_Logo.svg",
      "views": 845,
      "createdAt": "04.03.2023",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Что такое маршрутизация в Vue.js?",
          "paragraphs": [
            "Маршрутизация в Vue.js осуществляется с помощью Vue Router, официальной библиотеки для работы с маршрутами. Она позволяет определять пути, связывать их с соответствующими компонентами и реализовывать удобную навигацию между страницами приложения.",
            "Vue Router является особенно важным инструментом для создания SPA (single-page application), так как в таких приложениях традиционная перезагрузка страницы полностью отсутствует. Вместо этого переход между видами осуществляется за счёт управления состоянием и динамической загрузкой компонентов.",
            "С помощью Vue Router вы можете не только настраивать маршруты, но и добавлять функционал, такой как защищённые маршруты, ленивую загрузку или передовые параметры в URL."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "import { createRouter, createWebHistory } from 'vue-router';\nimport Home from './views/Home.vue';\nimport About from './views/About.vue';\n\nconst routes = [\n  { path: '/', component: Home },\n  { path: '/about', component: About }\n];\n\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\n\nexport default router;"
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "Ключевые возможности Vue Router",
          "paragraphs": [
            "Vue Router предлагает широкий спектр возможностей для разработчиков, среди которых:",
            "1. **Динамические маршруты:** позволяют добавлять переменные в пути, например, `/user/:id`, где `:id` может быть заменён конкретным значением.",
            "2. **Ленивая загрузка компонентов:** маршруты могут подгружать компоненты только при необходимости, что улучшает производительность.",
            "3. **Навигационные гарды:** позволяют реализовывать проверку прав доступа к определённым маршрутам, например, перед отображением страницы профиля.",
            "4. **Работа с анимациями:** при переключении маршрутов можно добавлять плавные переходы между видами приложения.",
            "Эти возможности делают Vue Router мощным инструментом для реализации сложных SPA."
          ]
        },
        {
          "id": "4",
          "type": "CODE",
          "code": "router.beforeEach((to, from, next) => {\n  if (to.meta.requiresAuth && !isAuthenticated()) {\n    next({ path: '/login' });\n  } else {\n    next();\n  }\n});"
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "Почему Vue Router важен для современной разработки?",
          "paragraphs": [
            "В современном веб-программировании SPA становятся стандартом для большинства интерфейсов. Они обеспечивают лучшую отзывчивость, сниженную загрузку сервера и улучшенное взаимодействие с пользователем.",
            "Vue Router позволяет разработчикам быстро и эффективно настраивать маршрутизацию в таких приложениях. Благодаря простой интеграции библиотека значительно ускоряет процесс разработки, оставляя время на реализацию бизнес-логики и пользовательских интерфейсов.",
            "Несмотря на то, что другие библиотеки, такие как React Router, также предоставляют аналогичный функционал, Vue Router выделяется своей простотой и полным соответствием парадигме Vue.js."
          ]
        }
      ],
      "user": {
        "id": "1",
        "username": "123"
      }
    },
    {
      "id": "2",
      "title": "Работа с SCSS в современном фронтенде",
      "subtitle": "Как SCSS улучшает процесс стилизации веб-приложений",
      "img": "https://example.com/scss-intro.png",
      "views": 854,
      "createdAt": "03.10.2023",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Введение в SCSS",
          "paragraphs": [
            "SCSS (Sassy CSS) — это расширение CSS, которое добавляет мощные функции программистского подхода к созданию стилей. Это один из препроцессоров CSS, который уже давно стал стандартом индустрии.",
            "SCSS предоставляет переменные, вложенные правила, миксины и возможность создавать модули для удобной организации кода. Эти возможности значительно упрощают процесс разработки и делают стили более читабельными и поддерживаемыми.",
            "Подключение SCSS в проект осуществляется с помощью таких инструментов, как Webpack или Gulp, которые обеспечивают автоматическую компиляцию SCSS в обычный CSS."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "/* Использование переменной */\n$primary-color: #3498db;\n\nbody {\n  background-color: $primary-color;\n  font-family: 'Arial', sans-serif;\n}"
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "Почему SCSS полезен для крупных проектов",
          "paragraphs": [
            "При работе с большими проектами возникает необходимость структурировать стили, чтобы они оставались масштабируемыми. SCSS помогает справляться с этим благодаря своей модульной архитектуре.",
            "Система импортов в SCSS позволяет разбивать код на отдельные файлы. Это делает проект более организованным и помогает разработчикам быстро находить нужные стили.",
            "Например, можно создать отдельные файлы для базовых стилей, компонентов и переменных, а затем импортировать их в главный файл:"
          ]
        },
        {
          "id": "4",
          "type": "CODE",
          "code": "@import 'base';\n@import 'components/button';\n@import 'variables';"
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "Вложенность и облегчённое написание стилей",
          "paragraphs": [
            "SCSS поддерживает вложенность, благодаря чему можно избегать повторения селекторов. Это особенно удобно при стилизации многоуровневых компонентов.",
            "Например, если вы работаете над меню с выпадающим списком, ваши стили могут выглядеть следующим образом:"
          ]
        },
        {
          "id": "6",
          "type": "CODE",
          "code": ".menu {\n  background-color: #f8f9fa;\n\n  .menu-item {\n    padding: 10px;\n    color: #000;\n\n    &:hover {\n      background-color: #e9ecef;\n    }\n  }\n}"
        },
        {
          "id": "7",
          "type": "TEXT",
          "title": "Заключение",
          "paragraphs": [
            "SCSS продолжает оставаться одним из самых востребованных инструментов для стилизации веб-приложений. Его функции помогают существенно ускорить разработку и улучшить читаемость кода.",
            "Если вы ещё не начали использовать SCSS, самое время попробовать — он откроет перед вами новые возможности и поможет писать стили более эффективно."
          ]
        }
      ],
      "user": {
        "id": "1",
        "username": "admin",
        "password": "123",
        "roles": [
          "ADMIN"
        ],
        "features": {
          "isProfileRatingEnabled": true
        },
        "jsonSettings": {
          "theme": "app_gray_theme"
        },
        "avatar": "https://yastatic.net/s3/fiji-static/_/BhSOy0uVxgiuSYKBBKCi2JGQy6U.png"
      }
    },
    {
      "id": "3",
      "title": "Почему TypeScript становится неотъемлемой частью фронтенд-разработки",
      "subtitle": "Преимущества TypeScript перед JavaScript",
      "img": "https://miro.medium.com/max/1400/1*lJ38GoCzkrFDIhjKDS5Xqw.png",
      "views": 1534,
      "createdAt": "14.03.2023",
      "userId": "1",
      "type": [
        "IT",
        "ECONOMICS",
        "SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Что такое TypeScript?",
          "paragraphs": [
            "TypeScript — это надстройка над JavaScript, которая добавляет строгую типизацию, что позволяет разработчикам улавливать ошибки ещё на этапе написания кода.",
            "Основным преимуществом использования TypeScript является возможность работы с современными стандартами JavaScript. Во многих проектах TypeScript используется для улучшения читаемости кода, что особенно важно для крупномасштабных приложений.",
            "Ещё одной важной особенностью TypeScript является его интеграция с популярными IDE, такими как Visual Studio Code, предоставляющими интеллектуальную подсказку и поддержку типов, что упрощает разработку."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "const multiply = (a: number, b: number): number => {\n  return a * b;\n};\n\nconsole.log(multiply(5, 3)); // 15"
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "Почему TypeScript так популярен?",
          "paragraphs": [
            "TypeScript помогает командам работать над большими кодовыми базами, минимизируя риск ошибок, связанных с динамической типизацией JavaScript. Это особенно ценно в условиях роста сложности фронтенд-приложений.",
            "Добавление типов к переменным, функциям и объектам делает код самодокументируемым, повышая его понятность для разработчиков, которые работают над проектом в долгосрочной перспективе.",
            "TypeScript также позволяет применять современные концепции программирования, такие как интерфейсы, декораторы и перечисления, которые отсутствуют в стандартном JavaScript."
          ]
        },
        {
          "id": "4",
          "type": "CODE",
          "code": "interface User {\n  id: number;\n  username: string;\n  email: string;\n}\n\nconst getUser = (id: number): User => {\n  return {\n    id,\n    username: 'john_doe',\n    email: 'john.doe@example.com'\n  };\n};\n\nconsole.log(getUser(1));"
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "Примеры использования TypeScript в реальных проектах",
          "paragraphs": [
            "TypeScript активно применяется в крупных компаниях, таких как Google, Microsoft и Airbnb. Благодаря типизационной системе разработчики могут легче масштабировать проекты.",
            "В сочетании с React, TypeScript обеспечивает мощные возможности для типизации компонентов, пропсов и состояний, что делает его выбором номер один для современных фронтенд-разработок.",
            "Также стоит отметить, что использование TypeScript снижает затраты на тестирование и рефакторинг за счёт обнаружения ошибок на ранних этапах."
          ]
        }
      ],
      "user": {
        "id": "1",
        "username": "123"
      }
    },
    {
      "id": "4",
      "title": "Почему Webpack важен для фронтенд-разработки?",
      "subtitle": "Ключевые преимущества и базовые возможности Webpack",
      "img": "https://webpack.js.org/assets/icon-square-big.svg",
      "views": 987,
      "createdAt": "01.04.2023",
      "userId": "1",
      "type": [
        "IT",
        "ECONOMICS"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Что такое Webpack?",
          "paragraphs": [
            "Webpack является модульным бандлером (сборщиком) для JavaScript-приложений и других ресурсов, таких как CSS, изображения и даже шрифты. Его цель — объединить различные файлы в один или несколько оптимизированных выходных файлов, готовых для использования в продакшене.",
            "Его уникальная особенность заключается в концепции модулей. Webpack обрабатывает каждый файл в вашем проекте как отдельный модуль. Это позволяет разрабатывать сложные приложения, сохраняя файловую структуру логичной и модульной.",
            "Сборщик позволяет значительно ускорить разработку и улучшить пользовательский опыт, предоставляя такие возможности, как кодовое разделение, оптимизация производительности и управление зависимостями."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Ключевые преимущества Webpack",
          "paragraphs": [
            "1. **Globbing**: Webpack позволяет автоматизировать процессы сборки, автоматически компилируя и оптимизируя все файлы вместо ручной настройки.",
            "2. **Сжатие и оптимизация**: Используя такие плагины, как TerserPlugin, Webpack уменьшает размер JavaScript-файлов, что улучшает загрузку страницы.",
            "3. **Ленивая загрузка (lazy loading)**: Webpack разбивает код на части (chunks), загружая только то, что требуется пользователю в текущий момент.",
            "4. **Гибкость через плагины**: Сотни плагинов предоставляют дополнительные функции, такие как минификация CSS, поддержка TypeScript и создание сервис-воркеров."
          ]
        },
        {
          "id": "3",
          "type": "CODE",
          "code": "const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/index.html'\n    })\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.css$/i,\n        use: ['style-loader', 'css-loader']\n      }\n    ]\n  }\n};"
        },
        {
          "id": "4",
          "type": "TEXT",
          "title": "Сценарии использования Webpack",
          "paragraphs": [
            "1. **Разработка SPA**: Webpack идеально подходит для создания одностраничных приложений (SPA), управляя как клиентской, так и серверной частью.",
            "2. **Оптимизация производительности**: В приложениях, где важна минимальная задержка загрузки, Webpack используется для минификации, дедупликации и разделения кода.",
            "3. **Модульное проектирование**: Webpack позволяет интегрировать TypeScript, SCSS или PostCSS в вашем проекте, упрощая написание модульного кода."
          ]
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "Пример ленивая загрузка кода",
          "paragraphs": [
            "Ленивая загрузка позволяет уменьшить объём данных, которые нужно загрузить при первичном рендеринге приложения. Рассмотрим пример динамического импорта:"
          ]
        },
        {
          "id": "6",
          "type": "CODE",
          "code": "async function loadModule() {\n  const { default: module } = await import('./module.js');\n  module();\n}\n\nloadModule();"
        }
      ],
      "user": {
        "id": "1",
        "username": "123"
      }
    },
    {
      "id": "5",
      "title": "Преимущества и особенности React для создания пользовательских интерфейсов",
      "subtitle": "Почему React стал одним из самых популярных фреймворков для фронтенд-разработки?",
      "img": "https://reactjs.org/logo-og.png",
      "views": 1287,
      "createdAt": "27.09.2023",
      "userId": "1",
      "type": [
        "IT",
        "ECONOMICS",
        "SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Что такое React?",
          "paragraphs": [
            "React — это библиотека JavaScript с открытым исходным кодом, предназначенная для создания пользовательских интерфейсов. Она была создана компанией Facebook и впервые выпущена в 2013 году. React активно используется для разработки веб-приложений, а также мобильных приложений через React Native.",
            "Одной из ключевых особенностей React является его компонентный подход, позволяющий разбивать интерфейсы на переиспользуемые модули. Это упрощает разработку, тестирование и масштабирование приложений.",
            "React фокусируется только на представлении данных, оставляя управление состоянием и маршрутизацию специализированным инструментам, таким как Redux или React Router."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Почему стоит использовать React?",
          "paragraphs": [
            "1. **Виртуальный DOM**: React использует виртуальный DOM, что делает обновление интерфейса быстрым и эффективным. Это особенно важно для приложений с динамическими данными.",
            "2. **Повторное использование компонентов**: Код становится модульным, что сокращает время разработки и уменьшает количество ошибок.",
            "3. **Сообщество и экосистема**: React поддерживает большое сообщество разработчиков и множество библиотек, что облегчает задачу интеграции с другими технологиями.",
            "4. **React-Hooks**: Начиная с версии 16.8, React представил хуки, которые позволяют управлять состоянием и жизненным циклом компонентов без использования классов."
          ]
        },
        {
          "id": "3",
          "type": "CODE",
          "code": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Вы нажали {count} раз</p>\n      <button onClick={() => setCount(count + 1)}>\n        Нажми меня\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;"
        },
        {
          "id": "4",
          "type": "TEXT",
          "title": "Основные концепции React",
          "paragraphs": [
            "1. **Компоненты**: Все элементы в React строятся на компонентах — это самостоятельные блоки кода, которые возвращают JSX.",
            "2. **Состояние (State)**: State позволяет компоненту React быть интерактивным, сохраняя и управляя данными внутри компонента.",
            "3. **Свойства (Props)**: Props используются для передачи данных от родителя к дочернему компоненту.",
            "4. **Однонаправленный поток данных**: React придерживается строго структурированного однонаправленного потока данных, что делает приложение предсказуемым."
          ]
        },
        {
          "id": "5",
          "type": "CODE",
          "code": "const App = () => {\n  const [theme, setTheme] = useState(\"light\");\n\n  const toggleTheme = () => {\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <div className={theme}>\n      <h1>Текущая тема: {theme}</h1>\n      <button onClick={toggleTheme}>Смена темы</button>\n    </div>\n  );\n};\n\nexport default App;"
        },
        {
          "id": "6",
          "type": "TEXT",
          "title": "Будущее React",
          "paragraphs": [
            "React активно развивается, добавляя новые возможности и улучшая производительность. Одна из последних крупных инициатив — это переход на Согласованный серверный рендеринг (Concurrent Mode), который улучшает отзывчивость приложений и ускоряет рендеринг.",
            "Технологии вроде Server Components и React Suspense открывают новые горизонты для работы с данными и оптимизации."
          ]
        }
      ],
      "user": {
        "id": "1",
        "username": "123"
      }
    },
    {
      "id": "6",
      "title": "Python news",
      "subtitle": "Что нового в JS за 2022 год?",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1200px-Python-logo-notext.svg.png",
      "views": 1027,
      "createdAt": "26.12.2022",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Заголовок этого блока",
          "paragraphs": [
            "Программа, которую по традиции называют «Hello, world!», очень проста. Она выводит куда-либо фразу «Hello, world!», или другую подобную, средствами некоего языка.",
            "JavaScript — это язык, программы на котором можно выполнять в разных средах. В нашем случае речь идёт о браузерах и о серверной платформе Node.js. Если до сих пор вы не написали ни строчки кода на JS и читаете этот текст в браузере, на настольном компьютере, это значит, что вы буквально в считанных секундах от своей первой JavaScript-программы.",
            "Существуют и другие способы запуска JS-кода в браузере. Так, если говорить об обычном использовании программ на JavaScript, они загружаются в браузер для обеспечения работы веб-страниц. Как правило, код оформляют в виде отдельных файлов с расширением .js, которые подключают к веб-страницам, но программный код можно включать и непосредственно в код страницы. Всё это делается с помощью тега <script>. Когда браузер обнаруживает такой код, он выполняет его. Подробности о теге script можно посмотреть на сайте w3school.com. В частности, рассмотрим пример, демонстрирующий работу с веб-страницей средствами JavaScript, приведённый на этом ресурсе. Этот пример можно запустить и средствами данного ресурса (ищите кнопку Try it Yourself), но мы поступим немного иначе. А именно, создадим в каком-нибудь текстовом редакторе (например — в VS Code или в Notepad++) новый файл, который назовём hello.html, и добавим в него следующий код:"
          ]
        }
      ]
    },
    {
      "id": "7",
      "title": "Kotlin news",
      "subtitle": "Что нового в JS за 2022 год?",
      "img": "https://miro.medium.com/max/1200/1*FNakkrty3kjOvNU8m5iQfw.png",
      "views": 1028,
      "createdAt": "22.02.2022",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Заголовок этого блока",
          "paragraphs": [
            "Программа, которую по традиции называют «Hello, world!», очень проста. Она выводит куда-либо фразу «Hello, world!», или другую подобную, средствами некоего языка.",
            "JavaScript — это язык, программы на котором можно выполнять в разных средах. В нашем случае речь идёт о браузерах и о серверной платформе Node.js. Если до сих пор вы не написали ни строчки кода на JS и читаете этот текст в браузере, на настольном компьютере, это значит, что вы буквально в считанных секундах от своей первой JavaScript-программы.",
            "Существуют и другие способы запуска JS-кода в браузере. Так, если говорить об обычном использовании программ на JavaScript, они загружаются в браузер для обеспечения работы веб-страниц. Как правило, код оформляют в виде отдельных файлов с расширением .js, которые подключают к веб-страницам, но программный код можно включать и непосредственно в код страницы. Всё это делается с помощью тега <script>. Когда браузер обнаруживает такой код, он выполняет его. Подробности о теге script можно посмотреть на сайте w3school.com. В частности, рассмотрим пример, демонстрирующий работу с веб-страницей средствами JavaScript, приведённый на этом ресурсе. Этот пример можно запустить и средствами данного ресурса (ищите кнопку Try it Yourself), но мы поступим немного иначе. А именно, создадим в каком-нибудь текстовом редакторе (например — в VS Code или в Notepad++) новый файл, который назовём hello.html, и добавим в него следующий код:"
          ]
        }
      ]
    },
    {
      "id": "8",
      "title": "Python news",
      "subtitle": "Что нового в JS за 2022 год?",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1200px-Python-logo-notext.svg.png",
      "views": 1029,
      "createdAt": "24.02.2022",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Заголовок этого блока",
          "paragraphs": [
            "Программа, которую по традиции называют «Hello, world!», очень проста. Она выводит куда-либо фразу «Hello, world!», или другую подобную, средствами некоего языка.",
            "JavaScript — это язык, программы на котором можно выполнять в разных средах. В нашем случае речь идёт о браузерах и о серверной платформе Node.js. Если до сих пор вы не написали ни строчки кода на JS и читаете этот текст в браузере, на настольном компьютере, это значит, что вы буквально в считанных секундах от своей первой JavaScript-программы.",
            "Существуют и другие способы запуска JS-кода в браузере. Так, если говорить об обычном использовании программ на JavaScript, они загружаются в браузер для обеспечения работы веб-страниц. Как правило, код оформляют в виде отдельных файлов с расширением .js, которые подключают к веб-страницам, но программный код можно включать и непосредственно в код страницы. Всё это делается с помощью тега <script>. Когда браузер обнаруживает такой код, он выполняет его. Подробности о теге script можно посмотреть на сайте w3school.com. В частности, рассмотрим пример, демонстрирующий работу с веб-страницей средствами JavaScript, приведённый на этом ресурсе. Этот пример можно запустить и средствами данного ресурса (ищите кнопку Try it Yourself), но мы поступим немного иначе. А именно, создадим в каком-нибудь текстовом редакторе (например — в VS Code или в Notepad++) новый файл, который назовём hello.html, и добавим в него следующий код:"
          ]
        }
      ]
    },
    {
      "id": "9",
      "title": "Kotlin news",
      "subtitle": "Что нового в JS за 2022 год?",
      "img": "https://miro.medium.com/max/1200/1*FNakkrty3kjOvNU8m5iQfw.png",
      "views": 1030,
      "createdAt": "29.03.2022",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Заголовок этого блока",
          "paragraphs": [
            "Программа, которую по традиции называют «Hello, world!», очень проста. Она выводит куда-либо фразу «Hello, world!», или другую подобную, средствами некоего языка.",
            "JavaScript — это язык, программы на котором можно выполнять в разных средах. В нашем случае речь идёт о браузерах и о серверной платформе Node.js. Если до сих пор вы не написали ни строчки кода на JS и читаете этот текст в браузере, на настольном компьютере, это значит, что вы буквально в считанных секундах от своей первой JavaScript-программы.",
            "Существуют и другие способы запуска JS-кода в браузере. Так, если говорить об обычном использовании программ на JavaScript, они загружаются в браузер для обеспечения работы веб-страниц. Как правило, код оформляют в виде отдельных файлов с расширением .js, которые подключают к веб-страницам, но программный код можно включать и непосредственно в код страницы. Всё это делается с помощью тега <script>. Когда браузер обнаруживает такой код, он выполняет его. Подробности о теге script можно посмотреть на сайте w3school.com. В частности, рассмотрим пример, демонстрирующий работу с веб-страницей средствами JavaScript, приведённый на этом ресурсе. Этот пример можно запустить и средствами данного ресурса (ищите кнопку Try it Yourself), но мы поступим немного иначе. А именно, создадим в каком-нибудь текстовом редакторе (например — в VS Code или в Notepad++) новый файл, который назовём hello.html, и добавим в него следующий код:"
          ]
        }
      ]
    },
    {
      "id": "10",
      "title": "Как использовать CSS Grid для современного дизайна",
      "subtitle": "Преимущества и основы работы с CSS Grid",
      "img": "https://developer.mozilla.org/static/img/favicon58.7f3da72c0687.png",
      "views": 1560,
      "createdAt": "10.03.2023",
      "userId": "1",
      "type": [
        "IT",
        "SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Что такое CSS Grid?",
          "paragraphs": [
            "CSS Grid — это модуль макета, который позволяет создавать сетки для веб-страниц с минимальным количеством кода.",
            "Этот инструмент разработан для решения задач, связанных с расположением элементов на странице. CSS Grid обеспечивает управление непосредственно как строками, так и столбцами, что упрощает создание гибкого дизайна.",
            "Система сетки идеально подходит для построения адаптивных и отзывчивых интерфейсов, экономя время на написание сложных стилей."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Почему это важно?",
          "paragraphs": [
            "Современные веб-сайты требуют гибкости и адаптивности, чтобы соответствовать требованиям различных устройств и экранов.",
            "CSS Grid помогает разработчикам создавать макеты, которые могут динамически изменяться в зависимости от размера экрана. Это снижает необходимость в сложных медиазапросах и упрощает процесс верстки.",
            "По сравнению с другими способами, такими как Flexbox или таблицы, CSS Grid предоставляет более мощный и наглядный инструмент для дизайна."
          ]
        },
        {
          "id": "3",
          "type": "CODE",
          "code": "body {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 20px;\n}\n\ndiv {\n  background-color: #e5e5e5;\n  padding: 20px;\n  text-align: center;\n}"
        },
        {
          "id": "4",
          "type": "TEXT",
          "title": "Как это работает?",
          "paragraphs": [
            "CSS Grid определяет сетку с использованием свойств `grid-template-rows`, `grid-template-columns` и `grid-template-areas`.",
            "Например, с помощью свойства `grid-template-columns: repeat(3, 1fr);`, сетка делится на три равные колонки.",
            "Также можно использовать автоматическое позиционирование с такими свойствами, как `grid-auto-flow`. Это позволяет расположить элементы по сетке без явного указания их места."
          ]
        },
        {
          "id": "5",
          "type": "CODE",
          "code": "div {\n  grid-column: 1 / 3;\n  grid-row: 1 / 2;\n}"
        },
        {
          "id": "6",
          "type": "TEXT",
          "title": "Заключение и советы",
          "paragraphs": [
            "CSS Grid упрощает создание сложных макетов, предоставляя инструменты для управления строками и колонками без лишних ухищрений.",
            "Освоить основные свойства модуля можно за несколько часов, начав с простых примеров и постепенно пробуя более сложные кейсы.",
            "Инструмент становится стандартом в веб-разработке и обеспечивает возможность идти в ногу с современными трендами создания интерфейсов."
          ]
        }
      ],
      "user": {
        "id": "1",
        "username": "123"
      }
    },
    {
      "id": "11",
      "title": "Kotlin news",
      "subtitle": "Что нового в JS за 2022 год?",
      "img": "https://miro.medium.com/max/1200/1*FNakkrty3kjOvNU8m5iQfw.png",
      "views": 1032,
      "createdAt": "30.01.2022",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Заголовок этого блока",
          "paragraphs": [
            "Программа, которую по традиции называют «Hello, world!», очень проста. Она выводит куда-либо фразу «Hello, world!», или другую подобную, средствами некоего языка.",
            "JavaScript — это язык, программы на котором можно выполнять в разных средах. В нашем случае речь идёт о браузерах и о серверной платформе Node.js. Если до сих пор вы не написали ни строчки кода на JS и читаете этот текст в браузере, на настольном компьютере, это значит, что вы буквально в считанных секундах от своей первой JavaScript-программы.",
            "Существуют и другие способы запуска JS-кода в браузере. Так, если говорить об обычном использовании программ на JavaScript, они загружаются в браузер для обеспечения работы веб-страниц. Как правило, код оформляют в виде отдельных файлов с расширением .js, которые подключают к веб-страницам, но программный код можно включать и непосредственно в код страницы. Всё это делается с помощью тега <script>. Когда браузер обнаруживает такой код, он выполняет его. Подробности о теге script можно посмотреть на сайте w3school.com. В частности, рассмотрим пример, демонстрирующий работу с веб-страницей средствами JavaScript, приведённый на этом ресурсе. Этот пример можно запустить и средствами данного ресурса (ищите кнопку Try it Yourself), но мы поступим немного иначе. А именно, создадим в каком-нибудь текстовом редакторе (например — в VS Code или в Notepad++) новый файл, который назовём hello.html, и добавим в него следующий код:"
          ]
        }
      ]
    },
    {
      "id": "12",
      "title": "Python news",
      "subtitle": "Что нового в JS за 2022 год?",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1200px-Python-logo-notext.svg.png",
      "views": 1033,
      "createdAt": "14.04.2020",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Заголовок этого блока",
          "paragraphs": [
            "Программа, которую по традиции называют «Hello, world!», очень проста. Она выводит куда-либо фразу «Hello, world!», или другую подобную, средствами некоего языка.",
            "JavaScript — это язык, программы на котором можно выполнять в разных средах. В нашем случае речь идёт о браузерах и о серверной платформе Node.js. Если до сих пор вы не написали ни строчки кода на JS и читаете этот текст в браузере, на настольном компьютере, это значит, что вы буквально в считанных секундах от своей первой JavaScript-программы.",
            "Существуют и другие способы запуска JS-кода в браузере. Так, если говорить об обычном использовании программ на JavaScript, они загружаются в браузер для обеспечения работы веб-страниц. Как правило, код оформляют в виде отдельных файлов с расширением .js, которые подключают к веб-страницам, но программный код можно включать и непосредственно в код страницы. Всё это делается с помощью тега <script>. Когда браузер обнаруживает такой код, он выполняет его. Подробности о теге script можно посмотреть на сайте w3school.com. В частности, рассмотрим пример, демонстрирующий работу с веб-страницей средствами JavaScript, приведённый на этом ресурсе. Этот пример можно запустить и средствами данного ресурса (ищите кнопку Try it Yourself), но мы поступим немного иначе. А именно, создадим в каком-нибудь текстовом редакторе (например — в VS Code или в Notepad++) новый файл, который назовём hello.html, и добавим в него следующий код:"
          ]
        }
      ]
    },
    {
      "id": "13",
      "title": "Kotlin news",
      "subtitle": "Что нового в JS за 2022 год?",
      "img": "https://miro.medium.com/max/1200/1*FNakkrty3kjOvNU8m5iQfw.png",
      "views": 1034,
      "createdAt": "27.06.2023",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Заголовок этого блока",
          "paragraphs": [
            "Программа, которую по традиции называют «Hello, world!», очень проста. Она выводит куда-либо фразу «Hello, world!», или другую подобную, средствами некоего языка.",
            "JavaScript — это язык, программы на котором можно выполнять в разных средах. В нашем случае речь идёт о браузерах и о серверной платформе Node.js. Если до сих пор вы не написали ни строчки кода на JS и читаете этот текст в браузере, на настольном компьютере, это значит, что вы буквально в считанных секундах от своей первой JavaScript-программы.",
            "Существуют и другие способы запуска JS-кода в браузере. Так, если говорить об обычном использовании программ на JavaScript, они загружаются в браузер для обеспечения работы веб-страниц. Как правило, код оформляют в виде отдельных файлов с расширением .js, которые подключают к веб-страницам, но программный код можно включать и непосредственно в код страницы. Всё это делается с помощью тега <script>. Когда браузер обнаруживает такой код, он выполняет его. Подробности о теге script можно посмотреть на сайте w3school.com. В частности, рассмотрим пример, демонстрирующий работу с веб-страницей средствами JavaScript, приведённый на этом ресурсе. Этот пример можно запустить и средствами данного ресурса (ищите кнопку Try it Yourself), но мы поступим немного иначе. А именно, создадим в каком-нибудь текстовом редакторе (например — в VS Code или в Notepad++) новый файл, который назовём hello.html, и добавим в него следующий код:"
          ]
        }
      ]
    },
    {
      "id": "14",
      "title": "Python news",
      "subtitle": "Что нового в JS за 2022 год?",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1200px-Python-logo-notext.svg.png",
      "views": 1035,
      "createdAt": "29.07.2022",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Заголовок этого блока",
          "paragraphs": [
            "Программа, которую по традиции называют «Hello, world!», очень проста. Она выводит куда-либо фразу «Hello, world!», или другую подобную, средствами некоего языка.",
            "JavaScript — это язык, программы на котором можно выполнять в разных средах. В нашем случае речь идёт о браузерах и о серверной платформе Node.js. Если до сих пор вы не написали ни строчки кода на JS и читаете этот текст в браузере, на настольном компьютере, это значит, что вы буквально в считанных секундах от своей первой JavaScript-программы.",
            "Существуют и другие способы запуска JS-кода в браузере. Так, если говорить об обычном использовании программ на JavaScript, они загружаются в браузер для обеспечения работы веб-страниц. Как правило, код оформляют в виде отдельных файлов с расширением .js, которые подключают к веб-страницам, но программный код можно включать и непосредственно в код страницы. Всё это делается с помощью тега <script>. Когда браузер обнаруживает такой код, он выполняет его. Подробности о теге script можно посмотреть на сайте w3school.com. В частности, рассмотрим пример, демонстрирующий работу с веб-страницей средствами JavaScript, приведённый на этом ресурсе. Этот пример можно запустить и средствами данного ресурса (ищите кнопку Try it Yourself), но мы поступим немного иначе. А именно, создадим в каком-нибудь текстовом редакторе (например — в VS Code или в Notepad++) новый файл, который назовём hello.html, и добавим в него следующий код:"
          ]
        }
      ]
    },
    {
      "id": "15",
      "title": "Введение в JAMstack",
      "subtitle": "Как JAMstack меняет подход к веб-разработке",
      "img": "https://upload.wikimedia.org/wikipedia/commons/c/c6/JAMstack_logo.svg",
      "views": 1345,
      "createdAt": "01.10.2023",
      "userId": "1",
      "type": [
        "IT",
        "ECONOMICS",
        "SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Что такое JAMstack?",
          "paragraphs": [
            "JAMstack — это современный подход к разработке веб-приложений и сайтов, в котором акцент делается на производительность, безопасность и масштабируемость. Аббревиатура «JAM» обозначает JavaScript, API и Markup. Вместо создания монолитных приложений, JAMstack архитектура разделяет фронтенд и бэкенд, минимизируя сложность приложения.",
            "Ключевая идея JAMstack заключается в том, чтобы заранее генерировать HTML, используя статические генераторы сайтов, и затем доставлять его через сети доставки контента (CDN). Это позволяет значительно ускорить загрузку страниц и снизить нагрузку на серверы.",
            "Этот принцип делает JAMstack идеальным для современных приложений и корпоративных веб-платформ, где важны высокая производительность и масштабируемость."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Преимущества JAMstack",
          "paragraphs": [
            "1. **Производительность**. Поскольку контент предопределен и доставляется через CDN, пользователи получают страницы максимально быстро независимо от их местоположения.",
            "2. **Безопасность**. Отсутствие серверного рендеринга и уменьшение числа взаимодействий с базой данных значительно снижают риск уязвимостей.",
            "3. **Масштабируемость**. Благодаря серверонезависимой архитектуре, горизонтальное масштабирование становится проще и дешевле.",
            "4. **Гибкость интеграций**. JAMstack позволяет использовать различные API для управления данными, что делает его удобным для интеграции с внешними сервисами."
          ]
        },
        {
          "id": "3",
          "type": "CODE",
          "code": "const generatePage = async () => {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n\n  return `\n    <html>\n      <head>\n        <title>${data.title}</title>\n      </head>\n      <body>\n        <h1>${data.heading}</h1>\n        <p>${data.content}</p>\n      </body>\n    </html>`;\n};\n\nconsole.log(await generatePage());"
        },
        {
          "id": "4",
          "type": "TEXT",
          "title": "Пример использования JAMstack",
          "paragraphs": [
            "Рассмотрим пример e-commerce платформы, построенной на JAMstack. Вместо использования крупных монолитных CMS, таких как WordPress, разработчики создают статически сгенерированный фронтенд, который интегрируется с внешними платежными системами и системами управления заказами через RESTful или GraphQL API. Это дает дополнительную безопасность, минимизирует задержки и упрощает разработку функционала."
          ]
        },
        {
          "id": "5",
          "type": "CODE",
          "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>JAMstack Example</title>\n  </head>\n  <body>\n    <h1>Welcome to JAMstack</h1>\n    <script>\n      fetch('https://api.example.com/data')\n        .then(response => response.json())\n        .then(data => {\n          document.body.innerHTML += `<p>${data.message}</p>`;\n        });\n    </script>\n  </body>\n</html>"
        },
        {
          "id": "6",
          "type": "TEXT",
          "title": "Заключение",
          "paragraphs": [
            "JAMstack позволяет значительно упростить процесс разработки веб-приложений, избежать большинства классических проблем с безопасностью и обеспечить максимальную производительность. Благодаря своей гибкости и интеграции современных инструментов, таких как React, Next.js, Gatsby, он становится все более популярным среди разработчиков.",
            "Если вы планируете начать новый проект, стоит рассмотреть JAMstack как основной подход и воспользоваться его многочисленными преимуществами."
          ]
        }
      ],
      "user": {
        "id": "1",
        "username": "123"
      }
    },
    {
      "id": "16",
      "title": "Python news",
      "subtitle": "Что нового в JS за 2022 год?",
      "img": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1200px-Python-logo-notext.svg.png",
      "views": 1037,
      "createdAt": "05.02.2023",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Заголовок этого блока",
          "paragraphs": [
            "Программа, которую по традиции называют «Hello, world!», очень проста. Она выводит куда-либо фразу «Hello, world!», или другую подобную, средствами некоего языка.",
            "JavaScript — это язык, программы на котором можно выполнять в разных средах. В нашем случае речь идёт о браузерах и о серверной платформе Node.js. Если до сих пор вы не написали ни строчки кода на JS и читаете этот текст в браузере, на настольном компьютере, это значит, что вы буквально в считанных секундах от своей первой JavaScript-программы.",
            "Существуют и другие способы запуска JS-кода в браузере. Так, если говорить об обычном использовании программ на JavaScript, они загружаются в браузер для обеспечения работы веб-страниц. Как правило, код оформляют в виде отдельных файлов с расширением .js, которые подключают к веб-страницам, но программный код можно включать и непосредственно в код страницы. Всё это делается с помощью тега <script>. Когда браузер обнаруживает такой код, он выполняет его. Подробности о теге script можно посмотреть на сайте w3school.com. В частности, рассмотрим пример, демонстрирующий работу с веб-страницей средствами JavaScript, приведённый на этом ресурсе. Этот пример можно запустить и средствами данного ресурса (ищите кнопку Try it Yourself), но мы поступим немного иначе. А именно, создадим в каком-нибудь текстовом редакторе (например — в VS Code или в Notepad++) новый файл, который назовём hello.html, и добавим в него следующий код:"
          ]
        }
      ]
    },
    {
      "id": "17",
      "title": "Kotlin news",
      "subtitle": "Что нового в JS за 2022 год?",
      "img": "https://miro.medium.com/max/1200/1*FNakkrty3kjOvNU8m5iQfw.png",
      "views": 1038,
      "createdAt": "16.08.2022",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Заголовок этого блока",
          "paragraphs": [
            "Программа, которую по традиции называют «Hello, world!», очень проста. Она выводит куда-либо фразу «Hello, world!», или другую подобную, средствами некоего языка.",
            "JavaScript — это язык, программы на котором можно выполнять в разных средах. В нашем случае речь идёт о браузерах и о серверной платформе Node.js. Если до сих пор вы не написали ни строчки кода на JS и читаете этот текст в браузере, на настольном компьютере, это значит, что вы буквально в считанных секундах от своей первой JavaScript-программы.",
            "Существуют и другие способы запуска JS-кода в браузере. Так, если говорить об обычном использовании программ на JavaScript, они загружаются в браузер для обеспечения работы веб-страниц. Как правило, код оформляют в виде отдельных файлов с расширением .js, которые подключают к веб-страницам, но программный код можно включать и непосредственно в код страницы. Всё это делается с помощью тега <script>. Когда браузер обнаруживает такой код, он выполняет его. Подробности о теге script можно посмотреть на сайте w3school.com. В частности, рассмотрим пример, демонстрирующий работу с веб-страницей средствами JavaScript, приведённый на этом ресурсе. Этот пример можно запустить и средствами данного ресурса (ищите кнопку Try it Yourself), но мы поступим немного иначе. А именно, создадим в каком-нибудь текстовом редакторе (например — в VS Code или в Notepad++) новый файл, который назовём hello.html, и добавим в него следующий код:"
          ]
        }
      ]
    },
    {
      "id": "18",
      "title": "Основы Frontend-разработки с React",
      "subtitle": "Создание современных пользовательских интерфейсов",
      "img": "https://reactjs.org/logo-og.png",
      "views": 1345,
      "createdAt": "05.04.2023",
      "userId": "1",
      "type": [
        "IT",
        "SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Что такое React?",
          "paragraphs": [
            "React — это библиотека JavaScript с открытым исходным кодом, разработанная Facebook для создания пользовательских интерфейсов. Она позволяет создавать компоненты, которые могут обновляться и рендериться без лишних затрат.",
            "Ключевая концепция React — использование компонентов и виртуального DOM. Компоненты представляют собой элемент интерфейса, который можно переиспользовать. Виртуальный DOM помогает минимизировать манипуляции с реальным DOM, что улучшает производительность приложения.",
            "Важной особенностью React является декларативный подход: разработчик описывает, каким должен быть интерфейс, а библиотека заботится о его обновлении."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Начало работы с React",
          "paragraphs": [
            "Чтобы начать работать с React, вам потребуется базовое знание JavaScript и понимание современного синтаксиса ES6. Это включает в себя такие элементы, как `let`, `const`, стрелочные функции и модули.",
            "Официальный инструмент для быстрого старта — Create React App. Он позволяет создать шаблон проекта со всеми базовыми настройками и зависимостями, готовый к работе.",
            "Установите его с помощью команды: `npx create-react-app my-app`. После установки вы получите структуру приложения, готовую к разработке."
          ]
        },
        {
          "id": "3",
          "type": "CODE",
          "code": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nfunction App() {\n  return <h1>Hello, React!</h1>;\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);"
        },
        {
          "id": "4",
          "type": "TEXT",
          "title": "Продвинутая функциональность",
          "paragraphs": [
            "Одной из мощных возможностей React является использование хуков. Они позволяют управлять состоянием и жизненным циклом без необходимости создавать классовые компоненты.",
            "Например, хук `useState` применяется для управления состоянием компонента. Использование хуков делает код более компактным и легче читаемым.",
            "Серверный рендеринг (SSR) и статическая генерация (SSG) через фреймворки, такие как Next.js, позволяют улучшить производительность и SEO вашего приложения. Это даёт возможность предварительно рендерить страницы на сервере или во время сборки проекта."
          ]
        },
        {
          "id": "5",
          "type": "CODE",
          "code": "import { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Текущее значение: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Увеличить</button>\n    </div>\n  );\n}\n\nexport default Counter;"
        },
        {
          "id": "6",
          "type": "TEXT",
          "title": "Итог",
          "paragraphs": [
            "React — это мощный инструмент для создания современных веб-приложений. Его концепции, такие как компоненты, виртуальный DOM и хуки, упрощают процесс разработки и позволяют создавать сложные интерфейсы.",
            "Сочетание React с такими инструментами, как Redux, TypeScript или Next.js, помогает решать широкий спектр задач — от управления состоянием до серверного рендеринга.",
            "Применение React может значительно повысить вашу производительность как разработчика и позволит создавать проекты, соответствующие современным стандартам веб-разработки."
          ]
        }
      ],
      "user": {
        "id": "1",
        "username": "123"
      }
    },
    {
      "id": "19",
      "title": "Kotlin news",
      "subtitle": "Что нового в JS за 2022 год?",
      "img": "https://miro.medium.com/max/1200/1*FNakkrty3kjOvNU8m5iQfw.png",
      "views": 1040,
      "createdAt": "25.05.2022",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Заголовок этого блока",
          "paragraphs": [
            "Программа, которую по традиции называют «Hello, world!», очень проста. Она выводит куда-либо фразу «Hello, world!», или другую подобную, средствами некоего языка.",
            "JavaScript — это язык, программы на котором можно выполнять в разных средах. В нашем случае речь идёт о браузерах и о серверной платформе Node.js. Если до сих пор вы не написали ни строчки кода на JS и читаете этот текст в браузере, на настольном компьютере, это значит, что вы буквально в считанных секундах от своей первой JavaScript-программы.",
            "Существуют и другие способы запуска JS-кода в браузере. Так, если говорить об обычном использовании программ на JavaScript, они загружаются в браузер для обеспечения работы веб-страниц. Как правило, код оформляют в виде отдельных файлов с расширением .js, которые подключают к веб-страницам, но программный код можно включать и непосредственно в код страницы. Всё это делается с помощью тега <script>. Когда браузер обнаруживает такой код, он выполняет его. Подробности о теге script можно посмотреть на сайте w3school.com. В частности, рассмотрим пример, демонстрирующий работу с веб-страницей средствами JavaScript, приведённый на этом ресурсе. Этот пример можно запустить и средствами данного ресурса (ищите кнопку Try it Yourself), но мы поступим немного иначе. А именно, создадим в каком-нибудь текстовом редакторе (например — в VS Code или в Notepad++) новый файл, который назовём hello.html, и добавим в него следующий код:"
          ]
        }
      ]
    },
    {
      "id": "20",
      "title": "Что такое Progressive Web Apps (PWA) и как они улучшают пользовательский опыт",
      "subtitle": "Современный подход к созданию производительных и удобных веб-приложений",
      "img": "https://miro.medium.com/max/700/1*Rl5eUY2P4GiVvNFQUFfA4Q.png",
      "views": 1345,
      "createdAt": "03.04.2023",
      "userId": "1",
      "type": [
        "IT",
        "ECONOMICS",
        "SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Определение PWA",
          "paragraphs": [
            "Progressive Web Apps (PWA) — это веб-приложения, которые используют современные технологии, чтобы предложить пользователям функциональность, характерную для родных приложений: работа без подключения к интернету, отправка push-уведомлений, возможность установки на домашний экран устройства.",
            "Такие приложения разрабатываются с акцентом на прогрессивное улучшение, что делает их доступными даже для пользователей с устаревшими браузерами, а для современных устройств они предоставляют расширенный набор возможностей.",
            "Основной принцип PWA — объединение лучших черт веба и мобильных приложений, чтобы обеспечить быстрый, надёжный и приятный опыт взаимодействия."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Ключевые характеристики PWA",
          "paragraphs": [
            "1. **Надёжность**: Они работают даже при слабом или отсутствующем интернете благодаря технологии Service Workers, которые позволяют кэшировать контент.",
            "2. **Быстродействие**: PWA загружаются быстрее по сравнению с традиционными веб-сайтами, минимизируя задержки и обеспечивая привлекательный пользовательский опыт.",
            "3. **Вовлечённость**: Поддержка push-уведомлений и возможность установки приложения прямо с браузера значительно повышают удобство использования и взаимодействие с пользователями."
          ]
        },
        {
          "id": "3",
          "type": "CODE",
          "code": "self.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open('pwa-cache-v1').then(cache => {\n      return cache.addAll([\n        '/',\n        '/index.html',\n        '/styles.css',\n        '/app.js'\n      ]);\n    })\n  );\n});"
        },
        {
          "id": "4",
          "type": "TEXT",
          "title": "Преимущества использования PWA",
          "paragraphs": [
            "1. Снижение затрат: Разработка и поддержка PWA часто дешевле, чем создание и управление несколькими родными приложениями для iOS и Android.",
            "2. Увеличение охвата: PWA могут работать на всех устройствах с браузером, что расширяет аудиторию.",
            "3. Улучшение SEO: Из-за высокой скорости загрузки и адаптивности PWA имеют преимущества в ранжировании поисковыми системами."
          ]
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "Заключение",
          "paragraphs": [
            "Progressive Web Apps представляют собой мощную альтернативу традиционным веб-сайтам и родным мобильным приложениям. Они позволяют объединить простоту доступа к вебу с функциональностью современных приложений.",
            "Интеграция PWA в вашу стратегию цифрового присутствия поможет улучшить пользовательский опыт, увеличить вовлечённость аудитории и снизить затраты на разработку."
          ]
        }
      ],
      "user": {
        "id": "1",
        "username": "123"
      }
    },
    {
      "id": "21",
      "title": "Особенности Virtual DOM в React",
      "subtitle": "Как Virtual DOM ускоряет рендеринг компонентов?",
      "img": "https://miro.medium.com/v2/resize:fit:1200/format:webp/1*EvFwlEJMe2mAThGnJez1Kw.png",
      "views": 853,
      "createdAt": "15.04.2023",
      "userId": "1",
      "type": [
        "IT",
        "SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Что такое Virtual DOM?",
          "paragraphs": [
            "Virtual DOM (виртуальный DOM) — это концепция, которую активно использует React. Он представляет собой легковесное отображение настоящего DOM (Document Object Model). Вместо прямого взаимодействия с DOM, React создает виртуальную копию дерева DOM в памяти.",
            "После того как изменения в состоянии приложения произошли, Virtual DOM сравнивает новую и текущую версии дерева, используя алгоритм, называемый 'диффинг'. Это позволяет React определить минимальный набор изменений, необходимых, чтобы синхронизировать Virtual DOM с реальным DOM."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Почему это эффективно?",
          "paragraphs": [
            "Работа напрямую с реальным DOM может быть медленной, так как он изначально не был спроектирован для частых обновлений. Каждое изменение DOM требует пересчета стилей, компоновки и перерисовки. Это особенно заметно на сложных интерфейсах.",
            "Virtual DOM помогает избежать этих издержек. При работе с ним React обновляет только те узлы, которые действительно изменились, вместо полного перерисовывания всех элементов на странице."
          ]
        },
        {
          "id": "3",
          "type": "CODE",
          "code": "const root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);"
        },
        {
          "id": "4",
          "type": "TEXT",
          "title": "Как React использует Virtual DOM?",
          "paragraphs": [
            "React использует Virtual DOM для повышения производительности. Вот общая последовательность работы:",
            "1. Когда состояние компонента изменяется, React сначала пересчитывает Virtual DOM.",
            "2. Затем с помощью диффинга сравниваются старая и новая версии Virtual DOM.",
            "3. После этого React определяет минимальный набор изменений и обновляет реальный DOM только там, где это необходимо."
          ]
        },
        {
          "id": "5",
          "type": "CODE",
          "code": "function handleClick() {\n  setState({ clicked: true });\n}\n\n<button onClick={handleClick}>Click me</button>"
        },
        {
          "id": "6",
          "type": "TEXT",
          "title": "Преимущества использования Virtual DOM",
          "paragraphs": [
            "1. Повышенная производительность за счет минимизации работы с реальным DOM.",
            "2. Упрощение процесса разработки благодаря декларативному подходу.",
            "3. Возможность использовать React на сервере с помощью серверного рендеринга (Server-Side Rendering, SSR).",
            "4. Дополнительные оптимизации, такие как React Fiber, для более плавного рендеринга."
          ]
        }
      ],
      "user": {
        "id": "1",
        "username": "123"
      }
    },
    {
      "id": "22",
      "title": "Преимущества использования TypeScript",
      "subtitle": "Почему TypeScript стал стандартом для фронтенд-разработки?",
      "img": "https://teknotower.com/wp-content/uploads/2020/11/ts.png",
      "views": 874,
      "createdAt": "14.09.2023",
      "userId": "1",
      "type": [
        "IT",
        "SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Преимущества строгой типизации",
          "paragraphs": [
            "TypeScript — это суперсет JavaScript, который добавляет поддержку строгой типизации. Это означает, что вы можете явно указывать типы переменных, что облегчает отладку и предотвращает ошибки, возникающие из-за динамической природы JavaScript.",
            "Одним из главных преимуществ является раннее выявление ошибок. Например, если вы попытаетесь передать строку в функцию, ожидающую число, TypeScript оповестит вас об этом еще на этапе компиляции.",
            "Кроме того, автодополнение и рефакторинг становятся более точными, когда IDE знает типы всех переменных и аргументов в вашем коде."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Ключевые отличия от JavaScript",
          "paragraphs": [
            "Хотя TypeScript полностью совместим с JavaScript, он предлагает множество функциональных возможностей, которых нет в стандартном JS.",
            "TypeScript поддерживает интерфейсы и абстрактные классы, что позволяет создавать более сложные структуры данных и улучшает читаемость кода.",
            "Также, благодаря поддержке модулей ES6, разработчики могут использовать современные возможности JavaScript и уже адаптировать их под строгую типизацию."
          ]
        },
        {
          "id": "3",
          "type": "CODE",
          "code": "interface User {\n  id: number;\n  name: string;\n}\n\nfunction greetUser(user: User): string {\n  return `Hello, ${user.name}!`;\n}\n\nconst user: User = { id: 1, name: \"John\" };\nconsole.log(greetUser(user));"
        },
        {
          "id": "4",
          "type": "TEXT",
          "title": "Пути интеграции TypeScript в проект",
          "paragraphs": [
            "Существует несколько способов интеграции TypeScript в существующий проект. Один из самых популярных — это постепенная миграция. Вы можете начинать с установки TypeScript и преобразования отдельных файлов .js в .ts.",
            "Для управления конфигурациями используется файл tsconfig.json. Здесь можно настроить такие параметры, как целевая версия JavaScript, включение строгих проверок и пути к файлам-источникам.",
            "Если проект уже использует современные инструменты, такие как Webpack или Vite, добавление поддержки TypeScript происходит без каких-либо сложностей с помощью соответствующих плагинов или загрузчиков."
          ]
        },
        {
          "id": "5",
          "type": "CODE",
          "code": "{\n  \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"strict\": true,\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\"\n  }\n}"
        }
      ],
      "user": {
        "id": "1",
        "username": "123"
      }
    },
    {
      "id": "23",
      "title": "Kotlin news",
      "subtitle": "Что нового в JS за 2022 год?",
      "img": "https://miro.medium.com/max/1200/1*FNakkrty3kjOvNU8m5iQfw.png",
      "views": 1044,
      "createdAt": "01.09.2022",
      "userId": "1",
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Заголовок этого блока",
          "paragraphs": [
            "Программа, которую по традиции называют «Hello, world!», очень проста. Она выводит куда-либо фразу «Hello, world!», или другую подобную, средствами некоего языка.",
            "JavaScript — это язык, программы на котором можно выполнять в разных средах. В нашем случае речь идёт о браузерах и о серверной платформе Node.js. Если до сих пор вы не написали ни строчки кода на JS и читаете этот текст в браузере, на настольном компьютере, это значит, что вы буквально в считанных секундах от своей первой JavaScript-программы.",
            "Существуют и другие способы запуска JS-кода в браузере. Так, если говорить об обычном использовании программ на JavaScript, они загружаются в браузер для обеспечения работы веб-страниц. Как правило, код оформляют в виде отдельных файлов с расширением .js, которые подключают к веб-страницам, но программный код можно включать и непосредственно в код страницы. Всё это делается с помощью тега <script>. Когда браузер обнаруживает такой код, он выполняет его. Подробности о теге script можно посмотреть на сайте w3school.com. В частности, рассмотрим пример, демонстрирующий работу с веб-страницей средствами JavaScript, приведённый на этом ресурсе. Этот пример можно запустить и средствами данного ресурса (ищите кнопку Try it Yourself), но мы поступим немного иначе. А именно, создадим в каком-нибудь текстовом редакторе (например — в VS Code или в Notepad++) новый файл, который назовём hello.html, и добавим в него следующий код:"
          ]
        }
      ]
    }
  ],
  "profile": [
    {
      "id": "1",
      "first": "Ганичев",
      "lastname": "Вафлентин",
      "age": 38,
      "currency": "EUR",
      "country": "Thailand",
      "city": "Saint Petersburg",
      "username": "admin",
      "avatar": "https://cdn.viqeo.tv/storage/5a/86/1a832576e0316f3bc04ca418bfc6f0b7.webp"
    },
    {
      "id": "2",
      "first": "Макс",
      "lastname": "Огр",
      "age": 39,
      "currency": "RUB",
      "country": "Russia",
      "city": "Oryol",
      "username": "admin2",
      "avatar": "https://i.ytimg.com/vi/5lV1F0b0iJ4/maxresdefault.jp"
    },
    {
      "id": "3",
      "first": "Test User",
      "lastname": "Огр",
      "age": 39,
      "currency": "RUB",
      "country": "Russia",
      "city": "Oryol",
      "username": "admin2",
      "avatar": "https://i.ytimg.com/vi/5lV1F0b0iJ4/maxresdefault.jp"
    }
  ],
  "article-ratings": [
    {
      "userId": "1",
      "articleId": "1",
      "rate": 5,
      "id": 1
    }
  ],
  "profile-ratings": [
    {
      "userId": "1",
      "profileId": "2",
      "rate": 1,
      "id": 1
    }
  ]
}